---
title: DSC 3091- Advanced Statistics Applications I
subtitle: "Multiple Linear Regression"
author: Dr Jagath Senarathne
institute: Department of Statistics and Computer Science 
format: 
  revealjs:
      theme: [beige, custom.scss]
      slide-number: true
      chalkboard: 
        theme: whiteboard
      
editor: visual
---

# Multiple Linear Regression

-   Studying the variation of Y(response variable) as a function of more than one X(explanatory) variables.

-   The general multiple linear regression model;

$$ Y= \beta_0+\beta_1x_1+\beta_2x_2...+\beta_px_p+ \epsilon$$

Where, $\epsilon \sim N(0,\sigma^2)$ is the random noise component of the model and $\beta_0,\beta_1,...,\beta_p$, are the unknown parameters.

------------------------------------------------------------------------

::: callout-note
## Example 1

You might want to predict how well a stock will do based on some other information that you just happen to have.
:::

::: callout-note
## Example 2

Imagine that you are a tourist guide. You need to provide the price range of food to your clients. The price of those food usually correlates with the Food Quality and Service Quality of the Restaurant.
:::

::: callout-note
## Example 3

Imagine that you're a traffic planner in your city and need to estimate the average commute time of drivers going from the east side of the city to the west. You know that it will depend on a number of factors like the distance driven, the number of stoplights on the route, and the number of other vehicles on the road.
:::

------------------------------------------------------------------------

## How to fit a multiple linear regression model?

<br>

**Steps you can follow:**

-   Graphical Interpretation
-   Parameter Estimation
-   Tests on Parameters
-   Analysis of Variance
-   Interpretation and Prediction

------------------------------------------------------------------------

## Graphical Interpretation

-   Before fitting a multiple liner regression model, plot a scatterplot between every possible pair of variables.

-   It helps in visualizing the strength of relationships.

-   Can also be used for variable selection and identifying co-linearity.

::: callout-note
## Example

Let's consider the built-in dataset, "abalone", in the package called "AppliedPredictiveModeling". Abalone data explains various physical measurements of sea snails. The main objective of this study is to predict the number of rings(which is an indicator of the age of the snail) using the other variables.
:::

------------------------------------------------------------------------

## Example Cont...

```{r, eval=FALSE, echo=TRUE}
install.packages("AppliedPredictiveModeling")
library(AppliedPredictiveModeling)
data(abalone)
attach(abalone)
head(abalone)
summary(abalone)
cor(abalone[,-1])
```

<br>

### Draw a correlogram using corrplot() function

```{r, eval=FALSE, echo=TRUE}
install.packages("corrplot")
library(corrplot)
corrplot(cor(abalone[,-1]), tl.col = "red")
```

------------------------------------------------------------------------

```{r,}
library(AppliedPredictiveModeling)
data(abalone)
attach(abalone)
library(corrplot)
corrplot(cor(abalone[,-1]), tl.col = "red")
```

------------------------------------------------------------------------

## Draw scatter plots using chart.Correlation():

```{r,echo=TRUE}
#install.packages("PerformanceAnalytics")
library("PerformanceAnalytics")
chart.Correlation(abalone[,-1], histogram=TRUE, pch=19)
```

## Parameter Estimation

-   Similar to the simple linear regression, we can use `lm()` function to estimate the unknown parameters $\beta_0, \beta_1,.,\beta_p$.

```{r, echo=TRUE}
model1 <-  lm(Rings~as.factor(Type) +LongestShell+ Diameter+ WholeWeight+ ShuckedWeight+ VisceraWeight+ ShellWeight)
model1
```

------------------------------------------------------------------------

```{r, echo=TRUE}
summary(model1)
```

------------------------------------------------------------------------

## Let's create a dummy variable!

```{r, echo=TRUE}
abalone$Type.I=ifelse(abalone$Type=="I",1,0)
abalone$Type.M=ifelse(abalone$Type=="M",1,0)
model2 <-  lm(Rings~Type.I + Type.M+ LongestShell+ Diameter+ WholeWeight+ ShuckedWeight+ VisceraWeight+ ShellWeight,data=abalone)
summary(model2)

```

# Methods of building a multiple linear regression model

-   Backward Elimination
-   Forward Selection
-   Bidirectional Elimination (Stepwise regression)

## Backward elimination

1.  Set a significance level for which data will stay in the model.

2.  Next, fit the full model with all possible predictors.

3.  Consider the predictor with the highest P-value. If the P-value is greater than the significance level, you'll move to step four, otherwise, you're done!

4.  Remove that predictor with the highest P-value.

5.  Fit the model without that predictor variable.

6.  Go back to step 3, do it all over, and keep doing that until you come to a point where even the highest P-value is \< SL.

------------------------------------------------------------------------

```{r, echo=TRUE}

model2 <-  lm(Rings~Type.I + Type.M+ LongestShell+ Diameter+ WholeWeight+ ShuckedWeight+ VisceraWeight+ ShellWeight,data=abalone)
step.model <- step(model2, direction = "backward",trace=FALSE)
summary(step.model)
```

------------------------------------------------------------------------

## Backward elimination using `SignifReg` package

```{r, echo=TRUE}
library(SignifReg)
nullmodel = lm(Rings~1, data=abalone)
fullmodel = lm(Rings~Type.I + Type.M+ LongestShell+ Diameter+ WholeWeight+ ShuckedWeight+ VisceraWeight+ ShellWeight, data=abalone)
scope = list(lower=formula(nullmodel),upper=formula(fullmodel))

Sub.model=drop1SignifReg(fullmodel, scope, alpha = 0.05, criterion = "p-value",override="TRUE")
summary(Sub.model)

```

## Forward selection

1.  Choose the significance level (SL = 0.05).
2.  Fit all possible simple regression models and select the one with the lowest P-value.
3.  Keep this variable and fit all possible models with one extra predictor added to the one you already have.
4.  Find the predictor with the lowest P-value. If P \< Sl, go back to step 3. Otherwise, you're done!

------------------------------------------------------------------------

```{r, echo=TRUE}
model2 <-  lm(Rings~Type.I + Type.M+ LongestShell+ Diameter+ WholeWeight+ ShuckedWeight+ VisceraWeight+ ShellWeight,data=abalone)
step.model2 <- step(model2, direction = "forward",trace=FALSE)
summary(step.model2)
```

## Forward selection using `SignifReg` package

```{r, echo=TRUE}
library(SignifReg)
nullmodel = lm(Rings~1, data=abalone)
fullmodel = lm(Rings~Type.I + Type.M+ LongestShell+ Diameter+ WholeWeight+ ShuckedWeight+ VisceraWeight+ ShellWeight, data=abalone)
scope = list(lower=formula(nullmodel),upper=formula(fullmodel))

sub.model2=add1SignifReg(nullmodel,scope, alpha = 0.05, criterion = "p-value",override="TRUE")
summary(sub.model2)
```

## Stepwise regression

1.  Select a significance level to enter and a significance level to stay.

2.  Perform the next step of forward selection where you add the new variable.

3.  Now perform all of the steps of backward elimination.

4.  Now head back to step two, then move forward to step 3, and so on until no new variables can enter and no new variables can exit.

------------------------------------------------------------------------

```{r, echo=TRUE}
model2 <-  lm(Rings~Type.I + Type.M+ LongestShell+ Diameter+ WholeWeight+ ShuckedWeight+ VisceraWeight+ ShellWeight,data=abalone)
step.model2 <- step(model2, direction = "forward", trace=FALSE)
summary(step.model2)
```

# Model Diagnosis

-   The model fitting is just the first part of the regression analysis since this is all based on certain assumptions.

-   Regression diagnostics are used to evaluate the model assumptions and investigate whether or not there are observations with a large, undue influence on the analysis.

## Model Assumptions

Before using a regression model for interpreting the data, we must check that the model assumptions are met.

Basic assumptions of regression models:

-   Linearity of the data: The relationship between the predictor (x) and the outcome (y) is assumed to be linear.

-   Normality of residuals: The residual errors are assumed to be normally distributed.

-   Homogeneity of residuals variance: The residuals are assumed to have a constant variance (homoscedasticity)

-   Independence of residuals error terms.

## Checking Assumptions

```{r, echo=TRUE}
par(mfrow = c(2, 2)) 
plot(step.model2)
```

------------------------------------------------------------------------

### Using `ggfortify` package

```{r, echo=TRUE}
par(mfrow = c(2, 2)) 
library(ggfortify) 
autoplot(step.model2)
```

------------------------------------------------------------------------

The diagnostic plots show residuals in four different ways:

1.  **Residuals vs Fitted**: to check the linear relationship assumptions.

2.  **Normal Q-Q**: to examine whether the residuals are normally distributed.

3.  **Scale-Location** (or Spread-Location): to check the homogeneity of variance of the residuals (homoscedasticity).

4.  **Residuals vs Leverage**: to identify extreme values that might influence the regression analysis.

## Identifying Influential Outliers

-   An outlier is a point which is often distant from the others.

-   It is a point with a large value of its residual.

-   Different residual measures can be used to identify outliers.

    -   Standardised residuals

    -   Studentized residuals

    -   Cook's distance

------------------------------------------------------------------------

### Standardised residuals

```{r, echo=TRUE}
standard_res=rstandard(step.model2)
plot(fitted(step.model2), standard_res)
```

-   Standardized residuals are "mostly" between 2 and 2, but they are dependent.

------------------------------------------------------------------------

### Studentized residuals

```{r, echo=TRUE, fig.height=4}
student_res=rstudent(step.model2)
plot(fitted(step.model2), student_res)
```

-   For an outlier the absolute values of its Studentized residual is greater than the 0.975th quantile of the Student distribution with $n-p-2$ degrees of freedom

------------------------------------------------------------------------

### Cook's Distance

-   It is calculated by removing the $i$th data point from the model and refitting the regression model.

-   It summarizes how much all the values in the regression model change when the $i$th observation is removed.

-   The formula for Cook's distance is:

    ![](images/paste-0464CED3.png){width="336"}

-   An R function to calculate Cook's distance is `cooks.distance()`.

------------------------------------------------------------------------

```{r, echo=TRUE}
dist_cook=cooks.distance(step.model2)
plot(dist_cook, type="h")
```

## Checking for multicollinearity

-   It is a statistical terminology where more than one independent variable is correlated with each other.

-   Results in reducing the reliability of statistical inferences.

-   Hence, these variables must be removed when building a multiple regression model.

-   Variance inflation factor (VIF) is used for detecting the multicollinearity in a model.

------------------------------------------------------------------------

### Variance inflation factor

```{r, echo=TRUE}
library(car)
vif_values <- vif(step.model2)          
barplot(vif_values, main = "VIF Values", horiz = TRUE, col = "steelblue") 
abline(v = 5, lwd = 3, lty = 2)    
```

## Testing the multicollinearity among the predictor variables

-   The `mctest` package in R provides the Farrar-Glauber test and other relevant tests for multicollinearity.

```{r, echo=TRUE}
library(mctest)
omcdiag(mod=step.model2)         
```

------------------------------------------------------------------------

```{r, echo=TRUE}
library(mctest)
imcdiag(mod=step.model2)         
```

# Model Selection

-   Model selection criteria refer to a set of exploratory tools for improving regression models.

-   Each model selection tool involves selecting a subset of possible predictor variables that still account well for the variation in the regression model's response variable.

-   This suggests that we need a quality criteria that considers the size of the model, since our preference is for small models that still fit well.

-   Several criteria are available to measure the performance of model. (AIC, BIC , $R^2$ (Coefficient of determination), adjacent $R^2$)

------------------------------------------------------------------------

-   The `summary()` function gives both $R^2$ and adjacent $R^2$ measures together.

```{r, echo=TRUE}
summary(step.model2)
```

------------------------------------------------------------------------

```{r, echo=TRUE}
AIC(step.model2)
library(lme4)
BIC(step.model2)
```

-   Choose the model with lower AIC and BIC values.

------------------------------------------------------------------------

## In-Class Assignment

Obtain a multiple linear regression model that best describes the variations in the response variable `Rings` in the `abalone` dataset. Briefly discuss the steps you followed and the suitability of the model you selected.

# Some Useful Links ...

-   <https://www.youtube.com/watch?v=dQNpSa-bq4M>

-   <https://www.youtube.com/watch?v=zyEZop-5K9Q>

-   <https://datascienceplus.com/multicollinearity-in-r/>

-   <https://www.codingprof.com/3-ways-to-test-for-multicollinearity-in-r-examples/>
